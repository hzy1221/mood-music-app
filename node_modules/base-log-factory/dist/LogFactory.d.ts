import Level from './Level';
import { Config, ILogger, TLevel } from './typings';
/**
 * Log Factory (日志工厂)
 */
export default class LogFactory {
    private readonly loggers;
    private LoggerClass;
    private defaultLevel;
    private appenders;
    /**
     * Constructor (构造函数)
     * @param config Configuration options (配置选项)
     */
    constructor(config?: Config);
    /**
     * Get the default log level (获取或设置默认日志级别)
     */
    get level(): Level;
    /**
     * Get the default log level name (获取或设置默认日志级别名称)
     */
    get levelName(): string;
    /**
     * Update the default log level (更新默认日志级别)
     * @param level Log level (日志级别)
     * @param updateCachedLoggers Whether to update the cached loggers (是否更新缓存的日志器)
     * @returns Update level success if true (如果为 true 表示更新成功)
     */
    updateLevel(level: Level | TLevel, updateCachedLoggers?: boolean): boolean;
    /**
     * Configure the log factory (配置日志工厂)
     * @param param Configuration options (配置选项)
     */
    configure({ LoggerClass, level, appenders }?: Config): void;
    /**
     * Get a logger instance (获取日志实例)
     * @param name Logger name (日志名称)
     */
    getLogger(name: string): ILogger;
    /**
     * Clear the logger cache (清除日志缓存)
     * @param name Logger name (日志名称)
     */
    clear(name?: string): void;
    /**
     * Dispose the log factory (销毁日志工厂)
     */
    dispose(): Promise<any[]>;
}
